generator client {
  provider      = "prisma-client-js"
  output        = "../lib/prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "../lib/prisma/zod"
  createInputTypes       = false
  addInputTypeValidation = false
  addIncludeType         = false
  addSelectType          = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Allergy {
  DUST
  ANIMALS
  HAY
  POLLEN
  MITES
}

enum JobType {
  WOOD
  PAINTING
  HOUSEWORK
  GARDEN
  OTHER
}

enum ToolName {
  AXE
  BOW_SAW
  LADDER
  PAINT
  PAINT_ROLLER
  COVER_SHEET
  MASKING_TAPE
  PAINT_BRUSH
  SCRAPER_GRID
  PAINTER_SPATULA
  JAPANESE_SPATULA
  GYPSUM
  BUCKET
  RAG
  BROOM   
  SAW         
  BRUSHCUTTER 
  GLOVES      
  RESPIRATOR  
  HEADPHONES  
  CHAINSAW    
  CIRCULAR_SAW
  RAKE
  PITCHFORK
  SHOVEL
}

enum Skill {
  LUMBERJACK
  ARTIST
  GARDENER
  DANGER
  ELECTRICIAN
  HEIGHTS
}

enum PostTag {
  EATING
  SPORTS
  CULTURAL
  EDUCATIONAL
  RELIGIOUS
  INFORMATIVE
}

model Tool {
  id                      String       @id @default(uuid())
  tool                    ToolName     
  amount                  Int          @default(1)
  proposedJobOnSite       ProposedJob? @relation("ToolOnSite", fields: [proposedJobOnSiteId], references: [id])
  proposedJobOnSiteId     String?      
  proposedJobToTakeWith   ProposedJob? @relation("ToolToTakeWith", fields: [proposedJobToTakeWithId], references: [id])
  proposedJobToTakeWithId String?      
}


model Participant {
  worker   Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId String 
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String  

  @@id([workerId, postId])
}

model Post {
  id                    String         @id @default(uuid())
  name                  String 
  madeIn                DateTime       @default(now())
  availability          DateTime[]     @db.Date
  timeFrom              String?      
  timeTo                String?      
  address               String? 
  coordinates           Float[] 
  tags                  PostTag[] 
  shortDescription      String 
  longDescription       String 
  photoPath             String? 
  isOpenForParticipants Boolean        @default(false)
  isMandatory           Boolean        @default(false)
  isPinned              Boolean        @default(false)
  participants          Participant[]
  forEvent              SummerJobEvent @relation(fields: [forEventId], references: [id], onDelete: Cascade)
  forEventId            String
}

model JobPhoto {
  id            String       @id @default(uuid())
  photoPath     String 
  proposedJob   ProposedJob? @relation("PhotoProposedJob", fields: [proposedJobId], references: [id], onDelete: Cascade)
  proposedJobId String?
}

model Worker {       
  id                 String                      @id @default(uuid())
  firstName          String      
  lastName           String      
  phone              String      
  email              String                      @unique
  cars               Car[]       
  isStrong           Boolean                     @default(false)
  isTeam             Boolean                     @default(false)
  allergies          Allergy[]       
  skills             Skill[]       
  jobs               ActiveJob[]       
  driving            Ride[]                      @relation("Driver")
  passengerIn        Ride[]      
  responsibleFor     ActiveJob[]                 @relation("ResponsibleWorker")
  deleted            Boolean                     @default(false)
  availability       WorkerAvailability[]      
  blocked            Boolean                     @default(false)
  permissions        WorkerPermissions           @relation(fields: [permissionsId], references: [id])
  permissionsId      String                      @unique
  note               String                      @default("")
  photoPath          String?
  age                Int?
  pinnedProposedJobs PinnedProposedJobByWorker[]
  attends            Participant[]
}

model WorkerPermissions {
  id          String   @id @default(uuid())
  worker      Worker?
  permissions String[]
}

model WorkerAvailability {
  id            String         @id @default(uuid())
  worker        Worker         @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId      String
  event         SummerJobEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String
  workDays      DateTime[]     @db.Date
  adorationDays DateTime[]     @db.Date

  @@unique([workerId, eventId])
}

model Car {
  id                  String         @id @default(uuid())
  name                String         @db.VarChar(64)
  description         String         @default("")
  seats               Int
  owner               Worker         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId             String
  rides               Ride[]
  odometerStart       Int
  odometerEnd         Int
  reimbursementAmount Int            @default(0)
  reimbursed          Boolean        @default(false)
  deleted             Boolean        @default(false)
  forEvent            SummerJobEvent @relation(fields: [forEventId], references: [id], onDelete: Cascade)
  forEventId          String
}

model ProposedJob {
  id                 String                      @id @default(uuid())
  name               String                
  publicDescription  String                      @default("")
  privateDescription String                      @default("")
  requiredDays       Int                 
  completed          Boolean                     @default(false)
  pinnedBy           PinnedProposedJobByWorker[]
  hidden             Boolean                     @default(false)
  minWorkers         Int                 
  maxWorkers         Int                 
  strongWorkers      Int                 
  address            String                
  coordinates        Float[]                 
  contact            String                
  hasFood            Boolean                     @default(false)
  hasShower          Boolean                     @default(false)
  area               Area?                       @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId             String?                 
  activeJobs         ActiveJob[]                 
  allergens          Allergy[]                 
  availability       DateTime[]                  @db.Date
  jobType            JobType                     @default(OTHER)
  toolsOnSite        Tool[]                      @relation("ToolOnSite")  
  toolsToTakeWith    Tool[]                      @relation("ToolToTakeWith")
  photos             JobPhoto[]                  @relation("PhotoProposedJob")
  priority           Int                         @default(1)
}

model PinnedProposedJobByWorker {
  worker      Worker      @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId    String
  proposedJob ProposedJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String

  @@id([workerId, jobId])
}

model ActiveJob {
  id                  String      @id @default(uuid())
  proposedJob         ProposedJob @relation(fields: [proposedJobId], references: [id], onDelete: Cascade)
  proposedJobId       String
  workers             Worker[]
  plan                Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId              String
  rides               Ride[]
  responsibleWorker   Worker?     @relation("ResponsibleWorker", fields: [responsibleWorkerId], references: [id])
  responsibleWorkerId String?
  completed           Boolean     @default(false)

  @@unique([proposedJobId, planId])
}

model Ride {
  id         String    @id @default(uuid())
  driver     Worker    @relation("Driver", fields: [driverId], references: [id], onDelete: Cascade)
  driverId   String
  car        Car       @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId      String
  passengers Worker[]
  job        ActiveJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String
}

model Plan {
  id               String         @id @default(uuid())
  day              DateTime       @unique @db.Date
  jobs             ActiveJob[]
  summerJobEvent   SummerJobEvent @relation(fields: [summerJobEventId], references: [id], onDelete: Cascade)
  summerJobEventId String
  published        Boolean        @default(false)
}

model Area {
  id                String         @id @default(uuid())
  name              String         @db.VarChar(64)
  requiresCar       Boolean
  supportsAdoration Boolean        @default(false)
  jobs              ProposedJob[]
  summerJobEvent    SummerJobEvent @relation(fields: [summerJobEventId], references: [id], onDelete: Cascade)
  summerJobEventId  String
}

model SummerJobEvent {
  id                 String               @id @default(uuid())
  name               String               @db.VarChar(64)
  startDate          DateTime             @db.Date
  endDate            DateTime             @db.Date
  isActive           Boolean              @default(false)
  areas              Area[]
  plans              Plan[]
  workerAvailability WorkerAvailability[]
  cars               Car[]
  posts              Post[]
}

model Logging {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  authorId   String
  authorName String
  resourceId String
  eventType  String
  message    String
}

// Next-Auth config

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
